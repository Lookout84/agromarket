import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { Sequelize } from 'sequelize';
import config from '../../config/config.js';

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–ª—è—Ö—ñ–≤ –¥–ª—è ES Modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
const sequelize = new Sequelize(
  config.database.database,
  config.database.username,
  config.database.password,
  {
    host: config.database.host,
    port: config.database.port,
    dialect: 'postgres',
    logging: config.database.logging ? console.log : false,
    pool: config.database.pool,
    dialectOptions: config.database.dialectOptions,
    define: {
      timestamps: true,
      underscored: true,
      freezeTableName: true,
    },
  }
);

const db = {
  sequelize,
  Sequelize,
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –≤—Å—ñ—Ö –º–æ–¥–µ–ª–µ–π
const modelsPath = path.join(__dirname);
const modelFiles = fs.readdirSync(modelsPath)
  .filter(file => file !== 'index.js' && file.endsWith('.js'));

for (const file of modelFiles) {
  const modelModule = await import(path.join(modelsPath, file));
  const model = modelModule.default(sequelize, Sequelize);
  db[model.name] = model;
}

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Å–æ—Ü—ñ–∞—Ü—ñ–π –º—ñ–∂ –º–æ–¥–µ–ª—è–º–∏
Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

// –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
const testConnection = async () => {
  try {
    await sequelize.authenticate();
    console.log('üü¢ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');

    if (config.database.sync) {
      await sequelize.sync({ alter: true });
      console.log('üîÑ –ú–æ–¥–µ–ª—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö');
    }
  } catch (error) {
    console.error('üî¥ –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', error.message);
    process.exit(1);
  }
};

// –í–∏–∫–æ–Ω–∞—Ç–∏ —Ç–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
if (process.env.NODE_ENV !== 'test') {
  await testConnection();
}

export default db;