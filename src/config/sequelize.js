import { Sequelize } from 'sequelize';
import config from './config.js';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';

// –®–ª—è—Ö–∏ –¥–ª—è ES Modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Sequelize –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
const sequelize = new Sequelize(
  config.database.database,
  config.database.username,
  config.database.password,
  {
    host: config.database.host,
    port: config.database.port,
    dialect: 'postgres',
    logging: config.database.logging ? console.log : false,
    pool: {
      max: config.database.pool.max,
      min: config.database.pool.min,
      acquire: config.database.pool.acquire,
      idle: config.database.pool.idle,
    },
    dialectOptions: config.database.dialectOptions,
    define: {
      timestamps: true,          // –î–æ–¥–∞—î createdAt, updatedAt
      underscored: true,         // snake_case –∑–∞–º—ñ—Å—Ç—å camelCase
      freezeTableName: true,     // –ó–∞–±–æ—Ä–æ–Ω—è—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –º–Ω–æ–∂–∏–Ω—É —ñ–º–µ–Ω —Ç–∞–±–ª–∏—Ü—å
      paranoid: true,            // –î–æ–¥–∞—î deletedAt –¥–ª—è soft delete
      hooks: {},                 // –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ö—É–∫–∏ –º–æ–¥–µ–ª–µ–π
    },
  }
);

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç —É—Å—ñ—Ö –º–æ–¥–µ–ª–µ–π –∑ –ø–∞–ø–∫–∏ `models`
const models = {};
const modelsPath = path.join(__dirname, '../src/db/models');

fs.readdirSync(modelsPath)
  .filter(file => file !== 'index.js' && file.endsWith('.js'))
  .forEach(async (file) => {
    const modelModule = await import(path.join(modelsPath, file));
    const model = modelModule.default(sequelize, Sequelize);
    models[model.name] = model;
  });

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Å–æ—Ü—ñ–∞—Ü—ñ–π –º—ñ–∂ –º–æ–¥–µ–ª—è–º–∏
Object.values(models).forEach(model => {
  if (model.associate) {
    model.associate(models);
  }
});

// –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
const testConnection = async () => {
  try {
    await sequelize.authenticate();
    console.log('üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ PostgreSQL');
    
    if (config.database.sync) {
      await sequelize.sync({ alter: true }); // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: { force: true } –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É
      console.log('üîÑ –ú–æ–¥–µ–ª—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ –∑ –ë–î');
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î:', error.message);
    process.exit(1);
  }
};

// –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ë–î
const db = {
  sequelize,
  Sequelize,
  ...models,
  testConnection,
  transaction: sequelize.transaction.bind(sequelize),
  query: sequelize.query.bind(sequelize),
};

export default db;